export const projectDesc = [
  {
    projectId: "e87e1c6d-f2c4-4ed1-ae50-86a4cdbaea30",
    content: `### 🛠 사용 스택 카드몽키 서비스에 사용된 도구들과 선택하게 된 이유에 대해 설명합니다. #### React
    카드몽키 서비스는 모바일 사이즈로 개발되었습니다. 모바일 친화적인 React 라이브러리를 선택하여 빠른 로드와 높은 사용성을 제공할 수 있었으며, 컴포넌트 기반으로 UI를 구성하여 코드 재사용을 통해 협업의 효과를 더욱 높일 수 있습니다.
    #### TypeScript
    빌드 에러를 방지하고, 공통 컴포넌트를 사용할 때 문제를 발생시키지 않도록 TypeScript를 사용하였습니다. 
    #### Redux Toolkit
    상태 관리 라이브러리로 Redux Toolkit을 사용했습니다. 저는 회원 가입을 구현하는 데 사용했는데, 단계별로 회원 정보를 받을 때마다 회원의 정보를 Redux Slice에 저장하고 마지막 단계에서 모든 정보를 회원 가입 요청 API에 보냈습니다. Redux Persist 라이브러리를 사용하여 새로 고침 시에도 Slice가 유지되도록 하였습니다. 
    #### React Cookie
    로그인 시에 Token을 Cookie에 저장하기 위해 사용하였습니다. React Cookie를 사용하여 Expire time을 설정했고, 로그아웃 시에 토큰을 삭제하여 토큰을 보호했습니다.
    #### Figma
    디자인 툴을 다뤄보지 않은 사람도 쉽게 사용할 수 있으며, 여러 명이 함께 작업할 수 있어 협업에 유용합니다. 피그마로 와이어프레임을 만들고, 와이어프레임을 기반으로 UI 디자인을 진행했습니다. 피그마로 간단한 배너도 만들었습니다.
    #### Lottie
    생동감 있는 서비스를 만들기 위해 SVG 애니메이션을 쉽게 사용할 수 있는 Lottie를 사용했습니다. 여러 정보를 입력하다 보면 피로할 수 있는 회원가입 마지막 단계에 폭죽을 터뜨리는 Lottie 애니메이션을 사용하여 분위기를 환기했습니다.
    
    ---
  
    ### 🚩 구현 내용
    이 서비스에서는 인증과 관련된 전반적인 기능을 구현했습니다. 이 서비스는 회원만 이용할 수 있기 때문에 로그인 여부에 따른 라우터 처리와 회원 혜택을 수집하는 회원가입 기능이 핵심적인 구현이었습니다. 
    #### ☑️ 회원가입 모바일 사이즈인 서비스이므로, 유저 정보를 작은 페이지에서 모두 받는 것은 UI/UX를 고려할 때 사용자가 피로감을 느낄 것 같았습니다. 더 나은 사용성을 위해, 단계별로 회원 정보를 입력 받았으며, 상단에 프로그래스바를 넣어 사용자가 어느 지점까지 도달했는지 확인할 수 있도록 하였습니다. 단계마다 유효성을 체크하여 조건을 만족할 경우에만 다음 단계로 넘어갈 수 있도록 하였습니다.
    #### ☑️ 로그인/로그아웃 인증 과정에서 토큰을 body로 받게 되어 직접 토큰을 쿠키에 저장했습니다. 반면 로그아웃 시에는 쿠키에서 토큰이 삭제되도록 하였습니다.
    #### ☑️ 라우터처리 카드몽키는 회원만 사용할 수 있는 서비스입니다. 로그아웃 상태일 때에는 회원가입 페이지와 로그인 페이지만 이용할 수 있습니다. 매 페이지마다 authCheck 함수를 실행하여 토큰이 만료되었거나 쿠키에 토큰이 없다면 로그인 페이지로 이동하도록 하였습니다.
    #### ☑️ 회원정보수정/회원탈퇴 회원정보 수정에서는 유효성 검사를 하고, 조건에 만족할 경우에만 수정할 수 있도록 하였으며, 회원탈퇴에서는 사용자가 실수로 회원탈퇴하지 않도록 회원탈퇴를 확인하는 모달을 띄웁니다.`,
  },
  {
    projectId: "3a0eb0ef-01a4-49ca-a949-616f03ed6865",
    content: `### 🛠 사용 스택
    마켓멍냥에 사용된 개발 도구들과 선택하게 된 이유에 대해 설명합니다.
    
    #### React
    반복되는 UI 컴포넌트를 사용하고 모듈의 장점을 살리고자 리액트를 사용하였습니다.
    #### Redux Toolkit 
    상태 관리를 위하여 Redux Toolkit을 사용했습니다. 저는 장바구니 기능에서 사용하였는데 장바구니의 아이템 수량과 아이템 추가, 제거 그리고 선택 삭제할 때 등 상태관리에 사용되었습니다. 새로고침시에도 Slice를 유지할 수 있도록 Redux Persist를 사용하였습니다.  
    #### SCSS
    스타일 도구로 SCSS를 사용하였습니다.
    #### Swiper
    쇼핑몰에서 많이 사용되는 슬라이드 배너를 쉽게 구현할 수 있도록 도와주는 Swiper 라이브러리를 사용하였습니다. 메인화면의 배너와 Best Item을 진열할 때 사용했습니다.
    
    ---
    
    ### 🚩 구현 내용
    저는 마켓멍냥 앱에서 장바구니와 상품 검색, 상품 목록, 상세페이지, 메인페이지, 모달 컴포넌트를 구현하였습니다.
    #### ☑️ 장바구니
    Redux Toolkit을 사용하여 상세 페이지에서 아이템을 추가하고, 장바구니에서는 수량에 따른 가격 변동과 선택 삭제, 전체 삭제 등의 기능을 구현했습니다. 또한 새로고침 시 장바구니가 비워지는 문제를 해결하기 위해 Redux Persist 라이브러리를 사용하여 장바구니 아이템을 로컬 스토리지에 저장했습니다. 장바구니를 구현하면서 Redux Toolkit에 대해 많이 배우고 문제 해결 능력도 많이 향상되었습니다.
    #### ☑️ 상품검색
    따로 검색에 대한 api가 없었으므로, 검색어를 params로 보내고 params 키워드가 포함된 물건을 보여주도록 하여 검색 기능을 구현하였습니다.
    #### ☑️ 상품 목록
    마켓멍냥 아이템에는 총 네 개의 카테고리가 존재했는데 상품을 등록할 때 카테고리를 함께 등록하여 카테고리 버튼을 누르면 그에 맞는 상품 목록만 필터링 되도록 하여 구현하였습니다.
    #### ☑️ 상세페이지
    아이템의 이미지 영역과, 상품 정보가 표시되는 영역을 따로 컴포넌트로 분리하여 코드를 간결화하였습니다. 가격이 표시되는 부분에서는 금액의 콤마를 표시해 주는 formatPrice 함수를 만들어 팀원들과 공통으로 사용하였고, 구매 버튼을 누르면 바로 결제 페이지로 이동, 장바구니 추가 버튼을 누르면 ‘장바구니로 이동하시겠습니까?’ 모달을 띄웠습니다. 수량을 추가하면 가격이 바로 계산되도록 구현하였습니다.`,
  },
  {
    projectId: "204da874-8543-4137-b4f1-b208da653197",
    content: `### 🛠 사용 스택
    #### JavaScript
    자바스크립트 내장 메서드를 학습하며 앱의 기본 동작을 구현하였습니다.
    #### Vite
    간단한 설치와 빌드 시간이 빠른 Vite를 사용하였습니다.
    #### SASS
    중첩 CSS 기능을 사용하기 위하여 스타일 전처리 도구로 SASS를 사용하였습니다.
    
    ---
    
    ### 🚩 구현 내용
    
    #### ☑️ 달력
    날짜를 클릭하면 해당 날짜가 왼쪽에 뜨게 됩니다. 그날 일정이 하나라도 있다면 별 표시가 되고, 없다면 할 일 리스트가 비워진 채로 띄워집니다.
    #### ☑️ To Do 기능
    할 일을 입력하고 추가하면 날짜가 함께 저장됩니다. 원래는 날짜가 아닌 다른 데이터를 넣도록 만들어진 key인데(원래는 우선순위 number를 입력하는 항목입니다.) 달력 기능을 사용하기 위해 이 항목을 활용하였습니다.`,
  },
];
