export const projectDesc = [
  {
    projectId: "e87e1c6d-f2c4-4ed1-ae50-86a4cdbaea30",
    content:
      "### 🛠 사용 스택 \n 카드몽키 서비스에 사용된 도구들과 선택하게 된 이유에 대해 설명합니다.\n #### React \n 카드몽키 서비스는 모바일 사이즈로 개발되었습니다. 모바일 친화적인 React 라이브러리를 선택하여 빠른 로드와 높은 사용성을 제공할 수 있었으며, 컴포넌트 기반으로 UI를 구성하여 코드 재사용을 통해 협업의 효과를 더욱 높일 수 있습니다. \n #### TypeScript \n 빌드 에러를 방지하고, 공통 컴포넌트를 사용할 때 문제를 발생시키지 않도록 TypeScript를 사용하였습니다.\n #### Redux Toolkit \n 상태 관리 라이브러리로 Redux Toolkit을 사용했습니다. 저는 회원 가입을 구현하는 데 사용했는데, 단계별로 회원 정보를 받을 때마다 회원의 정보를 Redux Slice에 저장하고 마지막 단계에서 모든 정보를 회원 가입 요청 API에 보냈습니다. Redux Persist 라이브러리를 사용하여 새로 고침 시에도 Slice가 유지되도록 하였습니다. \n #### React Cookie \n  로그인 시에 Token을 Cookie에 저장하기 위해 사용하였습니다. React Cookie를 사용하여 Expire time을 설정했고, 로그아웃 시에 토큰을 삭제하여 토큰을 보호했습니다.\n #### Figma \n 디자인 툴을 다뤄보지 않은 사람도 쉽게 사용할 수 있으며, 여러 명이 함께 작업할 수 있어 협업에 유용합니다. 피그마로 와이어프레임을 만들고, 와이어프레임을 기반으로 UI 디자인을 진행했습니다. 피그마로 간단한 배너도 만들었습니다. \n #### Lottie\n 생동감 있는 서비스를 만들기 위해 SVG 애니메이션을 쉽게 사용할 수 있는 Lottie를 사용했습니다. 여러 정보를 입력하다 보면 피로할 수 있는 회원가입 마지막 단계에 폭죽을 터뜨리는 Lottie 애니메이션을 사용하여 분위기를 환기했습니다.\n\n --- \n\n ### 🚩 구현 내용 \n 이 서비스에서는 인증과 관련된 전반적인 기능을 구현했습니다. 이 서비스는 회원만 이용할 수 있기 때문에 로그인 여부에 따른 라우터 처리와 회원 혜택을 수집하는 회원가입 기능이 핵심적인 구현이었습니다. \n #### ☑️ 회원가입 \n 모바일 사이즈인 서비스이므로, 유저 정보를 작은 페이지에서 모두 받는 것은 UI/UX를 고려할 때 사용자가 피로감을 느낄 것 같았습니다. 더 나은 사용성을 위해, 단계별로 회원 정보를 입력 받았으며, 상단에 프로그래스바를 넣어 사용자가 어느 지점까지 도달했는지 확인할 수 있도록 하였습니다. 단계마다 유효성을 체크하여 조건을 만족할 경우에만 다음 단계로 넘어갈 수 있도록 하였습니다.\n #### ☑️ 로그인/로그아웃 \n 인증 과정에서 토큰을 body로 받게 되어 직접 토큰을 쿠키에 저장했습니다. 반면 로그아웃 시에는 쿠키에서 토큰이 삭제되도록 하였습니다. \n #### ☑️ 라우터처리 \n 카드몽키는 회원만 사용할 수 있는 서비스입니다. 로그아웃 상태일 때에는 회원가입 페이지와 로그인 페이지만 이용할 수 있습니다. 매 페이지마다 authCheck 함수를 실행하여 토큰이 만료되었거나 쿠키에 토큰이 없다면 로그인 페이지로 이동하도록 하였습니다.\n#### ☑️ 회원정보수정/회원탈퇴 \n 회원정보 수정에서는 유효성 검사를 하고, 조건에 만족할 경우에만 수정할 수 있도록 하였으며, 회원탈퇴에서는 사용자가 실수로 회원탈퇴하지 않도록 회원탈퇴를 확인하는 모달을 띄웁니다.",
  },
  {
    projectId: "3a0eb0ef-01a4-49ca-a949-616f03ed6865",
    content: `### 🛠 사용 스택 \n 마켓멍냥에 사용된 개발 도구들과 선택하게 된 이유에 대해 설명합니다. \n  #### React \n 반복되는 UI 컴포넌트를 사용하고 모듈의 장점을 살리고자 리액트를 사용하였습니다. \n #### Redux Toolkit \n 상태 관리를 위하여 Redux Toolkit을 사용했습니다. 저는 장바구니 기능에서 사용하였는데 장바구니의 아이템 수량과 아이템 추가, 제거 그리고 선택 삭제할 때 등 상태관리에 사용되었습니다. 새로고침시에도 Slice를 유지할 수 있도록 Redux Persist를 사용하였습니다. \n #### SCSS \n 스타일 도구로 SCSS를 사용하였습니다. \n #### Swiper \n 쇼핑몰에서 많이 사용되는 슬라이드 배너를 쉽게 구현할 수 있도록 도와주는 Swiper 라이브러리를 사용하였습니다. 메인화면의 배너와 Best Item을 진열할 때 사용했습니다. \n \n --- \n \n  ### 🚩 구현 내용 \n 저는 마켓멍냥 앱에서 장바구니와 상품 검색, 상품 목록, 상세페이지, 메인페이지, 모달 컴포넌트를 구현하였습니다. \n #### ☑️ 장바구니 \n Redux Toolkit을 사용하여 상세 페이지에서 아이템을 추가하고, 장바구니에서는 수량에 따른 가격 변동과 선택 삭제, 전체 삭제 등의 기능을 구현했습니다. 또한 새로고침 시 장바구니가 비워지는 문제를 해결하기 위해 Redux Persist 라이브러리를 사용하여 장바구니 아이템을 로컬 스토리지에 저장했습니다. 장바구니를 구현하면서 Redux Toolkit에 대해 많이 배우고 문제 해결 능력도 많이 향상되었습니다. \n #### ☑️ 상품검색 \n 따로 검색에 대한 api가 없었으므로, 검색어를 params로 보내고 params 키워드가 포함된 물건을 보여주도록 하여 검색 기능을 구현하였습니다. \n #### ☑️ 상품 목록 \n 마켓멍냥 아이템에는 총 네 개의 카테고리가 존재했는데 상품을 등록할 때 카테고리를 함께 등록하여 카테고리 버튼을 누르면 그에 맞는 상품 목록만 필터링 되도록 하여 구현하였습니다. \n #### ☑️ 상세페이지 \n 아이템의 이미지 영역과, 상품 정보가 표시되는 영역을 따로 컴포넌트로 분리하여 코드를 간결화하였습니다. 가격이 표시되는 부분에서는 금액의 콤마를 표시해 주는 formatPrice 함수를 만들어 팀원들과 공통으로 사용하였고, 구매 버튼을 누르면 바로 결제 페이지로 이동, 장바구니 추가 버튼을 누르면 ‘장바구니로 이동하시겠습니까?’ 모달을 띄웠습니다. 수량을 추가하면 가격이 바로 계산되도록 구현하였습니다.`,
  },
  {
    projectId: "204da874-8543-4137-b4f1-b208da653197",
    content: `### 🛠 사용 스택 \n #### JavaScript \n 자바스크립트 내장 메서드를 학습하며 앱의 기본 동작을 구현하였습니다. \n #### Vite \n 간단한 설치와 빌드 시간이 빠른 Vite를 사용하였습니다. \n #### SASS \n 중첩 CSS 기능을 사용하기 위하여 스타일 전처리 도구로 SASS를 사용하였습니다. \n\n --- \n\n ### 🚩 구현 내용 \n #### ☑️ 달력 \n 날짜를 클릭하면 해당 날짜가 왼쪽에 뜨게 됩니다. 그날 일정이 하나라도 있다면 별 표시가 되고, 없다면 할 일 리스트가 비워진 채로 띄워집니다.\n #### ☑️ To Do 기능 \n 할 일을 입력하고 추가하면 날짜가 함께 저장됩니다. 원래는 날짜가 아닌 다른 데이터를 넣도록 만들어진 key인데(원래는 우선순위 number를 입력하는 항목입니다.) 달력 기능을 사용하기 위해 이 항목을 활용하였습니다.`,
  },
  {
    projectId: "98769145-c647-4529-8960-dc50b15f841a",
    content: `### 🛠 사용 스택 \n #### JavaScript \n 자바스크립트 내장 메서드를 학습하며 앱의 기본 동작을 구현하였습니다. \n #### Parcel Bundler \n Webpack보다 빠른 설치가 가능하고 별다른 설정이 필요없는 Parcel bundler를 사용하여 dev환경에서도 실행시켜 확인하며 개발할 수 있었습니다. \n #### SASS \n 중첩 CSS 기능을 사용하기 위하여 스타일 전처리 도구로 SASS를 사용하였습니다.\n\n --- \n\n ### 🚩 구현 내용 \n #### ☑️ 검색기능 \n검색어를 query로 보내어 API를 요청하였고 검색 결과를 JSON data로 받아 알맞는 위치와 디자인으로 markup해주었습니다. \n#### ☑️ 에러 핸들링 \n정보가 없거나, 이미지가 없거나 개발을 하면서 확인되는 에러에 대해선 빠짐없이 핸들링을 해주려고 노력하였습니다.`,
  },
  {
    projectId: "6ba1cb6f-4c2f-4d8f-81b7-80d158fa3d18",
    content: `### 🛠 사용 스택 \n #### **NextJS** \n NextJS는 리액트를 기반으로 만들어진 프레임워크로, 필요에 따라 SSR, CSR을 선택할 수 있습니다. SSR을 사용하면 사용자가 보다 빨리 어떤 내용이 있는지를 확인할 수 있으며, SEO를 활용하고 싶다면 좋은 선택이 될 수 있습니다. 이러한 장점이 있는 NextJS를 익히면서 프로젝트를 진행했습니다. \n #### **Vercel** \n NextJS를 만들었던 Vercel을 이용하여 배포했습니다. \n #### **React Query** \n 이번 프로젝트에서 서버 상태 관리 라이브러리인 React Query를 학습용으로 사용해 보았습니다. Mutation과 Fetching을 손쉽게 할 수 있었고, 요청이 모두 왔을 때 처리해 주는 onSuccess 기능도 활용해 보았습니다. 이번을 계기로 Stale한 데이터와 Fresh한 데이터에 대한 개념을 잘 알게 되었습니다. \n #### **Styled-components** \n Styled-components를 사용하여 한 파일에서 스타일을 제어했습니다. \n #### **React Hook Form** \n 유효성 검사를 수행하고, 쉽게 폼을 제출할 수 있는 React Hook Form을 사용했습니다. \n 저는 약관 등록 페이지에서 이를 사용했습니다. \n #### **React-toastify** \n React-toastify UI 라이브러리를 사용하여 요청의 성공 여부와 실패 여부를 사용자에게 알려주었습니다. \n\n --- \n\n ### 🚩 구현 내용 \n #### ☑️ 약관 버전 관리 \n 약관의 종류는 총 네 개이며, 각 약관은 단 하나씩만 공개 상태여야 합니다. 다른 약관을 공개 처리하면 "약관은 하나만 공개할 수 있습니다. 현재 공개 상태인 약관을 비공개로 처리하시겠습니까?"라는 모달이 표시됩니다. 이 기능을 구현하면서 백엔드 파트와 많은 대화를 나누었으며, 'force'라는 항목을 추가하여 강제로 공개/비공개 상태를 제어할 수 있도록 기능을 만들었습니다. \n #### ☑️ **약관 등록, 삭제, 수정** \n React Hook Form을 사용하여 약관을 등록할 때, 어떤 카테고리의 약관인지 선택하고, 제목과 내용을 입력하며, 버전을 입력할 때에는 숫자와 ‘.’만 입력할 수 있도록 하였습니다. 약관이 등록, 삭제, 수정이 완료될 때마다 React-toastify UI를 표시하여 요청의 성공 여부를 사용자에게 알려주었습니다.`,
  },
  {
    projectId: "bdb474ef-e3cc-455d-951c-454fdaa33ad5",
    content: `### 🛠 사용 스택 \n #### **React** \n 개발 기간이 짧은 프로젝트였어서 가장 익숙한 React를 사용하였습니다. \n #### **Netlify** \n 가장 익숙한 배포방법인 Netlify를 사용했습니다. \n #### **Styled-components** \n Styled-components를 사용하여 한 파일에서 스타일을 제어했습니다. \n #### **React Hook Form** \n 유효성 검사를 수행하고, 쉽게 폼을 제출할 수 있는 React Hook Form을 사용했습니다. \n 회원가입을 구현할 때 사용하였습니다. \n #### **React Cookie** \n 로그인 시에 Token을 Cookie에 저장하기 위해 사용하였습니다. React Cookie를 사용하여 Expire time도 설정할 수 있었고, 로그아웃 시에 토큰을 삭제하여 토큰을 보호할 수 있었습니다. \n #### **Chat GPT Code Review** \n github action을 사용하여 Chat Gpt에게 코드리뷰를 받았습니다. 가끔 좋은 컨벤션을 알려주어 도움을 받았습니다. \n\n --- \n\n ### 🚩 구현 내용 \n #### ☑️ 회원가입\n react hook form을 처음 익히는 계기가 되었습니다. 각 항목마다 유효성 검사를 진행해서 조건에 맞지 않으면 error 메세지를 띄워주었습니다. \n #### ☑️ **로그인**\n 해당 서비스는 유저가 두 종류로 나뉘었기 때문에 ‘관리자’와 ‘일반’유저 선택에 따라 각각 다른 로그인 api를 요청했습니다. 토큰은 react cookie를 이용해 쿠키에 보관하였고, token 만료시간을 15분으로 설정하여 로그인 성공 기준 시간에서 15분 뒤인 시간을 사이드바에 표시해주었습니다.`,
  },
];
